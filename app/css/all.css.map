{"version":3,"sources":["_param.scss","../../bower_components/bootstrap/scss/mixins/_breakpoints.scss","all.scss"],"names":[],"mappings":"AAMA,OACE,wCAAuC,EACxC;;AAaD,cACE,0CAAyC,EAC1C;;AACD,WACE,iBAAgB,EACjB;;AACD,oBACE,iBAAgB,CAChB,gBAAe,CACf,eAAc,CACd,YAAW,EACZ;;AACD,UAEE,mBAAkB,EAYnB;;AAdD,gBAII,mBAAkB,CAClB,OAAM,CACN,UAAS,CACT,aAAY,CACZ,eAAc,CACd,oCAA0B,CAA1B,gCAA0B,CAA1B,4BAA0B,CAC1B,YAAW,CACX,YAAW,CACX,iCAAgC,EACjC;;AAEH,IACE,oBAAmB,EACpB;;AACD,IACE,2BAA0B,EAI3B;;AALD,UAGI,sBAAqB,EACtB;;AAEH,OACE,sBAAqB,EACtB;;AACD,iBACE,2BAA0B,EAK3B;;AAND,uBAGI,0BAAyB,CACzB,sBAAqB,EACtB;;AAEH,SACE,gBAAe,CACf,kBAAiB,EAClB;;AACD,cACE,eAAc,EACf;;AACD,KACE,gBAAe,CACf,kBAAiB,CACjB,kBAAiB,EAKlB;;ACTG,+BDCJ,KAKI,gBAAe,CACf,kBAAiB,EAEpB,EAAA;;AACD,qBACE,mBAAkB,EACnB;;AACD,qBACE,4BAA2B,EAS5B;;AAVD,uBAGI,eAAc,CACd,gBAAe,CACf,kBAAiB,EAIlB;;AATH,0DAOM,cAAa,EACd;;AAGL,eACE,gBAAe,CACf,kBAAiB,CACjB,kBAAiB,EAClB;;AACD,gBACE,sBAAqB,EACtB;;AACD,gBACE,iBAAgB,EAWjB;;AAZD,+BAGI,yBAAgB,CAAhB,iBAAgB,EACjB;;AAJH,uBAMI,mBAAkB,CAClB,UAAS,CACT,YAAW,CACX,gBAAe,CACf,cAAa,EACd;;AAEH,cACE,oBAAmB,EAiBpB;;AAlBD,4BAGI,aAAY,CACZ,mBAAkB,CAClB,oBAAmB,EASpB;;AAzHD,kDAkHI,6BAAgB,EAhHnB;;AACD,8CA+GI,6BAAgB,EA7GnB;;AACD,uDA4GI,6BAAgB,EA1GnB;;ACsDC,+BD6CJ,4BAUM,mBAAkB,CAClB,oBAAmB,EAGtB,EAAA;;AAdH,uBAgBM,kBAAiB,EAClB;;AAEL,aACE,aAAY,EACb;;AErID,YACC,oBAAmB,CACnB,mBAAkB,CAClB,WAAU,EAiBV;;AD+CG,+BCnEJ,YAME,yBAAsB,CAAtB,gCAAsB,CAAtB,sBAAsB,CAAtB,wBAAsB,EAcvB,EAAA;;AApBD,mBASE,mBAAkB,CAClB,OAAM,CACN,UAAS,CACT,aAAY,CACZ,eAAc,CACd,oCAA0B,CAA1B,gCAA0B,CAA1B,4BAA0B,CAC1B,oBAAmB,CACnB,YAAW,CACX,YAAW,EAEX;;AAEF,cAEE,gBAAe,CACf,eAAc,CACd,sBAAqB,EACrB;;AAEF,iBACC,8BAA6B,EAC7B;;AACD,KACC,gBAAe,CACf,kBAAiB,CACjB,kBAAiB,EACjB","file":"all.css","sourcesContent":["@import\r\n  '_custom_bootstrap_vatiables.scss',\r\n  '../../bower_components/bootstrap/scss/_functions.scss',\r\n  '../../bower_components/bootstrap/scss/_variables.scss',\r\n  '../../bower_components/bootstrap/scss/_mixins.scss';\r\n\r\nbody{\r\n  font: 18px/30px Georgia, Georgia, serif;\r\n}\r\n// The Mixin \r\n@mixin placeholder_custom{\r\n  &:-ms-input-placeholder {\r\n    @content\r\n  }\r\n  &::-moz-placeholder {\r\n    @content\r\n  }\r\n  &::-webkit-input-placeholder {\r\n    @content\r\n  }\r\n}\r\n.arial_font{\r\n  font-family: Arial, Helvetica, sans-serif;\r\n}\r\n.wrapper{\r\n  overflow: hidden;\r\n}\r\n.wrapper_centered{\r\n  max-width: 730px;\r\n  padding: 0 15px;\r\n  margin: 0 auto;\r\n  width: 100%;\r\n}\r\n.header{\r\n  \r\n  position: relative;\r\n  &:after{\r\n    position: absolute;\r\n    top: 0;\r\n    left: 50%;\r\n    height: 100%;\r\n    width: 99999px;\r\n    transform:translateX(-50%);\r\n    content: '';\r\n    z-index: -1;\r\n    border-bottom: 1px solid #dfdfdf;\r\n  }\r\n}\r\np{\r\n  margin-bottom: 28px;\r\n}\r\na{\r\n  text-decoration: underline;\r\n  &:hover{\r\n    text-decoration: none;\r\n  }\r\n}\r\n.btn{\r\n  text-decoration: none;\r\n}\r\na.text-primary{\r\n  text-decoration: underline;\r\n  &:hover{\r\n    color: #3083c7 !important;\r\n    text-decoration: none;\r\n  }\r\n}\r\n.fz_14{\r\n  font-size: 14px;\r\n  line-height: 16px;\r\n}\r\n.text_light{\r\n  color: #898888;\r\n}\r\nh1{\r\n  font-size: 36px;\r\n  line-height: 48px;\r\n  font-weight: bold;\r\n  @include media-breakpoint-down(md) {\r\n    font-size: 24px;\r\n    line-height: 28px;\r\n  }\r\n}\r\n.font_style_normal{\r\n  font-style: normal;\r\n}\r\n.blockquote_custom{\r\n  border-left: 3px solid #333;\r\n  q{\r\n    display: block;\r\n    font-size: 18px;\r\n    line-height: 30px;\r\n    &:after,&:before{\r\n      content: none;\r\n    }\r\n  }\r\n}\r\n.modal-title{\r\n  font-size: 30px;\r\n  line-height: 33px;\r\n  font-weight: bold;\r\n}\r\n.form-control{\r\n  border-color: #c6c6c6;\r\n}\r\n.modal_dialog{\r\n  max-width: 700px;\r\n  .modal-content{\r\n    border-radius: 0;\r\n  }\r\n  .close{\r\n    position: absolute;\r\n    top: 10px;\r\n    right: 15px;\r\n    font-size: 30px;\r\n    padding: 10px;\r\n  }\r\n}\r\n.form_group{\r\n  margin-bottom: 20px;\r\n  .form-control{\r\n    height: 50px;\r\n    padding-left: 30px;\r\n    padding-right: 30px;\r\n    @include placeholder_custom {\r\n      color: rgba(#333,.4);\r\n    } \r\n    @include media-breakpoint-down(sm) {\r\n      padding-left: 15px;\r\n      padding-right: 15px;\r\n    }\r\n\r\n  }\r\n   textarea{\r\n      min-height: 100px;\r\n    }\r\n}\r\n.btn_large{\r\n  height: 50px;\r\n}","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n","@import\r\n'_custom_bootstrap_vatiables.scss',\r\n'../../bower_components/bootstrap/scss/_functions.scss',\r\n'../../bower_components/bootstrap/scss/_variables.scss',\r\n'../../bower_components/bootstrap/scss/_mixins.scss',\r\n'_param';\r\n.long_bar{\r\n\tbackground: #f3f3f3;\r\n\tposition: relative;\r\n\tz-index: 1;\r\n\t\r\n\t @include media-breakpoint-down(xs) {\r\n\t\tjustify-content:center;\r\n\t }\r\n\t&:before{\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tleft: 50%;\r\n\t\theight: 100%;\r\n\t\twidth: 99999px;\r\n\t\ttransform:translateX(-50%);\r\n\t\tbackground: #f3f3f3;\r\n\t\tcontent: '';\r\n\t\tz-index: -1;\r\n\t\t\r\n\t}\r\n}\r\n.soc_list{\r\n\ta{\r\n\t\tfont-size: 20px;\r\n\t\tcolor: #3083c7;\r\n\t\ttext-decoration: none;\r\n\t}\r\n}\r\n.block_article{\r\n\tborder-bottom: 1px solid #ddd;\r\n}\r\nh3{\r\n\tfont-size: 18px;\r\n\tline-height: 30px;\r\n\tfont-weight: bold;\r\n}"]}